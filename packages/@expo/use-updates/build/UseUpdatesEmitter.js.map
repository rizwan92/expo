{"version":3,"file":"UseUpdatesEmitter.js","sourceRoot":"","sources":["../src/UseUpdatesEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["import { DeviceEventEmitter } from 'expo-modules-core';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport { useEffect, useRef } from 'react';\n\nimport { UseUpdatesEvent } from './UseUpdates.types';\n\n// Emitter and hook specifically for @expo/use-updates module\n// Listens for the same native events as Updates.addListener\n// Emits the native events (or allows JS code to emit events) with\n// new event name 'Expo.useUpdatesEvent'\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener(\n      'Expo.nativeUpdatesStateChangeEvent',\n      _emitNativeStateChangeEvent\n    );\n  }\n  return _emitter;\n}\n\nfunction _addListener(listener: (event: UseUpdatesEvent) => void): EventSubscription {\n  const emitter = _getEmitter();\n  return emitter.addListener('Expo.useUpdatesEvent', listener);\n}\n\n// Handle native state change events\nfunction _emitNativeStateChangeEvent(params: any) {\n  let newParams = { ...params };\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.context.latestManifestString) {\n    newParams.context.latestManifest = JSON.parse(newParams.context.latestManifestString);\n    delete newParams.context.latestManifestString;\n  }\n  if (newParams.context.downloadedManifestString) {\n    newParams.context.downloadedManifest = JSON.parse(newParams.context.downloadedManifestString);\n    delete newParams.context.downloadedManifestString;\n  }\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter?.emit('Expo.updatesStateChangeEvent', newParams);\n}\n\n// What JS code uses to emit events\nexport const emitEvent = (event: UseUpdatesEvent) => {\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Expo.useUpdatesEvent', event);\n};\n\nexport const useUpdateEvents = (listener: (event: UseUpdatesEvent) => void) => {\n  const listenerRef = useRef<typeof listener>();\n\n  useEffect(() => {\n    listenerRef.current = listener;\n  }, [listener]);\n\n  useEffect(() => {\n    if (listenerRef.current) {\n      const subscription = _addListener(listenerRef.current);\n      return () => {\n        subscription.remove();\n      };\n    }\n    return undefined;\n  }, []);\n};\n\nexport const addUpdatesStateChangeListener = (listener: (event: any) => void) => {\n  const emitter = _getEmitter();\n  return emitter.addListener('Expo.updatesStateChangeEvent', listener);\n};\n"]}