{"version":3,"file":"UseUpdates.types.js","sourceRoot":"","sources":["../src/UseUpdates.types.ts"],"names":[],"mappings":"AA2JA;;GAEG;AACH,MAAM,CAAN,IAAY,mBASX;AATD,WAAY,mBAAmB;IAC7B;;OAEG;IACH,sCAAe,CAAA;IACf;;OAEG;IACH,2EAAoD,CAAA;AACtD,CAAC,EATW,mBAAmB,KAAnB,mBAAmB,QAS9B","sourcesContent":["import Constants from 'expo-constants';\nimport type { UpdatesLogEntry } from 'expo-updates';\n\nexport type ClassicManifest = NonNullable<typeof Constants.manifest>;\n\n/**\n * The [modern manifest type](https://docs.expo.dev/versions/latest/sdk/constants/#manifest)\n */\nexport type Manifest = ClassicManifest | NonNullable<typeof Constants.manifest2>;\n\n/**\n * Structure encapsulating information on the currently running app\n * (either the embedded bundle or a downloaded update).\n */\nexport type CurrentlyRunningInfo = {\n  /**\n   * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The\n   * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and\n   * will always use lowercase letters. In development mode, or any other environment in which\n   * `expo-updates` is disabled, this value is `null`.\n   */\n  updateId: string | null;\n  /**\n   * The channel name of the current build, if configured for use with EAS Update. `null` otherwise.\n   */\n  channel: string | null;\n  /**\n   * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update\n   * that's currently running (whether it was embedded or downloaded at runtime).\n   *\n   * In development mode, or any other environment in which `expo-updates` is disabled, this value is\n   * `null`.\n   */\n  createdAt: Date | null;\n  /**\n   * This will be true if the currently running update is the one embedded in the build,\n   * and not one downloaded from the updates server.\n   */\n  isEmbeddedLaunch: boolean;\n  /**\n   * `expo-updates` does its very best to always launch monotonically newer versions of your app so\n   * you don't need to worry about backwards compatibility when you put out an update. In very rare\n   * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in\n   * the app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\n   * This boolean will be `true` if the app is launching under this fallback mechanism and `false`\n   * otherwise. If you are concerned about backwards compatibility of future updates to your app, you\n   * can use this constant to provide special behavior for this rare case.\n   */\n  isEmergencyLaunch: boolean;\n  /**\n   * If `expo-updates` is enabled, this is the\n   * [manifest](https://docs.expo.dev/versions/latest/sdk/updates/#updatesmanifest) object for the update that's currently\n   * running.\n   *\n   * In development mode, or any other environment in which `expo-updates` is disabled, this object is\n   * empty.\n   */\n  manifest: Partial<Manifest> | null;\n  /**\n   * The runtime version of the current build.\n   */\n  runtimeVersion: string | null;\n};\n\n/**\n * Structure representing an available or downloaded update.\n */\nexport type UpdateInfo = {\n  /**\n   * A string that uniquely identifies the update. For the manifests used in the current Expo Updates protocol (including\n   * EAS Update), this represents the update's UUID in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`)\n   * and will always use lowercase letters.\n   */\n  updateId: string | null;\n  /**\n   * A `Date` object representing the creation time of the update.\n   */\n  createdAt: Date | null;\n  /**\n   * The [manifest](https://docs.expo.dev/versions/latest/sdk/constants/#manifest) for the update.\n   */\n  manifest: Manifest | null;\n  /**\n   * True if this update is a directive to invalidate all downloaded updates and roll back to running the embedded app bundle.\n   * False otherwise.\n   */\n  isRollback: boolean;\n};\n\n/**\n * The structures and methods returned by `useUpdates()`.\n */\nexport type UseUpdatesReturnType = {\n  /**\n   * Information on the currently running app\n   */\n  currentlyRunning: CurrentlyRunningInfo;\n  /**\n   * If a new available update has been found, either by using checkForUpdate(),\n   * or by the `UpdateEvent` listener in `useUpdates()`,\n   * this will contain the information for that update.\n   */\n  availableUpdate?: UpdateInfo;\n  /**\n   * If an available update has been downloaded, this will contain the information\n   * for that update.\n   */\n  downloadedUpdate?: UpdateInfo;\n  /**\n   * True if a new available update has been found, false otherwise.\n   */\n  isUpdateAvailable: boolean;\n  /**\n   * True if a new available update is available and has been downloaded.\n   */\n  isUpdatePending: boolean;\n  /**\n   * True if the app is currently checking for a new available update from the server.\n   */\n  isChecking: boolean;\n  /**\n   * True if the app is currently downloading an update from the server.\n   */\n  isDownloading: boolean;\n  /**\n   * If an error is returned by any of the APIs to check for, download, or launch updates,\n   * the error description will appear here.\n   */\n  error?: Error;\n  /**\n   * A `Date` object representing the last time this client checked for an available update,\n   * or `undefined` if no check has yet occurred since the app started. Does not persist across\n   * app reloads or restarts.\n   */\n  lastCheckForUpdateTimeSinceRestart?: Date;\n  /**\n   * If present, contains items of type [UpdatesLogEntry](https://docs.expo.dev/versions/latest/sdk/updates/#updateslogentry)\n   * returned by the `getLogEntries()` method.\n   */\n  logEntries?: UpdatesLogEntry[];\n};\n\n// Type for the state managed by useUpdates(). Used internally by this module and not exported publicly.\nexport type UseUpdatesStateType = {\n  availableUpdate?: UpdateInfo;\n  downloadedUpdate?: UpdateInfo;\n  error?: Error;\n  isUpdateAvailable: boolean;\n  isUpdatePending: boolean;\n  isChecking: boolean;\n  isDownloading: boolean;\n  lastCheckForUpdateTimeSinceRestart?: Date;\n  logEntries?: UpdatesLogEntry[];\n};\n\n/**\n * The types of update-related events.\n */\nexport enum UseUpdatesEventType {\n  /**\n   * An error occurred.\n   */\n  ERROR = 'error',\n  /**\n   * A call to `readLogEntries()` has completed successfully.\n   */\n  READ_LOG_ENTRIES_COMPLETE = 'readLogEntriesComplete',\n}\n\n/**\n * An object that is passed into each event listener when an auto-update check occurs.\n */\nexport type UseUpdatesEvent = {\n  /**\n   * Type of the event.\n   */\n  type: UseUpdatesEventType;\n  /**\n   * If `type` is `UseUpdatesEventType.ERROR`, the error, and `undefined` otherwise.\n   */\n  error?: Error;\n  /**\n   * If `type` is `UseUpdatesEventType.READ_LOG_ENTRIES_COMPLETE`, the log entries returned, and `undefined` otherwise.\n   */\n  logEntries?: UpdatesLogEntry[];\n};\n\n/**\n * The native state machine context, either read directly from a native module method,\n * or received in a state change event. Used internally by this module and not exported publicly.\n */\nexport type UpdatesNativeStateMachineContext = {\n  isUpdateAvailable: boolean;\n  isUpdatePending: boolean;\n  isChecking: boolean;\n  isDownloading: boolean;\n  isRollback: boolean;\n  isRestarting: boolean;\n  latestManifest?: Manifest;\n  downloadedManifest?: Manifest;\n  checkError?: Error;\n  downloadError?: Error;\n};\n\n/**\n * An event emitted when native state changes. Used internally by this module and not exported publicly.\n */\nexport type UpdatesNativeStateChangeEvent = {\n  context: UpdatesNativeStateMachineContext;\n};\n"]}