{"version":3,"file":"UseUpdatesUtils.js","sourceRoot":"","sources":["../src/UseUpdatesUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Updates from 'expo-updates';\n\nimport type {\n  CurrentlyRunningInfo,\n  UpdatesNativeStateMachineContext,\n  UseUpdatesStateType,\n} from './UseUpdates.types';\n\n// The currently running info, constructed from Updates constants\nexport const currentlyRunning: CurrentlyRunningInfo = {\n  updateId: Updates.updateId,\n  channel: Updates.channel,\n  createdAt: Updates.createdAt,\n  isEmbeddedLaunch: Updates.isEmbeddedLaunch,\n  isEmergencyLaunch: Updates.isEmergencyLaunch,\n  manifest: Updates.manifest,\n  runtimeVersion: Updates.runtimeVersion,\n};\n\n/////// Internal functions ////////\n\n// Constructs the availableUpdate from the native state change event context\nexport const availableUpdateFromContext = (context: { [key: string]: any }) => {\n  const manifest = context?.latestManifest;\n  const isRollback = context.isRollback;\n  return manifest || isRollback\n    ? {\n        updateId: manifest?.id ?? null,\n        createdAt:\n          manifest && 'createdAt' in manifest && manifest.createdAt\n            ? new Date(manifest.createdAt)\n            : manifest && 'publishedTime' in manifest && manifest.publishedTime\n            ? new Date(manifest.publishedTime)\n            : null,\n        manifest: manifest || null,\n        isRollback,\n      }\n    : undefined;\n};\n\n// Constructs the downloadedUpdate from the native state change event context\nexport const downloadedUpdateFromContext = (context: { [key: string]: any }) => {\n  const manifest = context?.downloadedManifest;\n  const isRollback = context.isRollback;\n  return manifest || isRollback\n    ? {\n        updateId: manifest?.id ?? null,\n        createdAt:\n          manifest && 'createdAt' in manifest && manifest.createdAt\n            ? new Date(manifest.createdAt)\n            : manifest && 'publishedTime' in manifest && manifest.publishedTime\n            ? new Date(manifest.publishedTime)\n            : null,\n        manifest: manifest || null,\n        isRollback,\n      }\n    : undefined;\n};\n\n// Read the native context directly from expo-updates native module\n// Fall back to default if native method throws or is not available\nexport const readNativeContext: () => UpdatesNativeStateMachineContext = () => {\n  const defaultContext: UpdatesNativeStateMachineContext = {\n    isChecking: false,\n    isDownloading: false,\n    isRestarting: false,\n    isRollback: false,\n    isUpdateAvailable: false,\n    isUpdatePending: false,\n  };\n  if (Updates.nativeStateMachineContext) {\n    try {\n      const nativeContext = Updates.nativeStateMachineContext();\n      return {\n        ...defaultContext,\n        ...nativeContext,\n      };\n    } catch {}\n  }\n  return defaultContext;\n};\n\n// Default useUpdates() state\nexport const defaultUseUpdatesState: UseUpdatesStateType = {\n  isChecking: false,\n  isDownloading: false,\n  isUpdateAvailable: false,\n  isUpdatePending: false,\n};\n\n// Transform the useUpdates() state based on native state machine context\nexport const reduceUpdatesStateFromContext = (\n  updatesState: UseUpdatesStateType,\n  context: UpdatesNativeStateMachineContext\n) => {\n  if (context.isChecking) {\n    return {\n      ...updatesState,\n      isChecking: true,\n      lastCheckForUpdateTimeSinceRestart: new Date(),\n    };\n  }\n  const availableUpdate = availableUpdateFromContext(context);\n  const downloadedUpdate = downloadedUpdateFromContext(context);\n  return {\n    ...updatesState,\n    isUpdateAvailable: context.isUpdateAvailable,\n    isUpdatePending: context.isUpdatePending || availableUpdate?.isRollback || false,\n    isChecking: context.isChecking,\n    isDownloading: context.isDownloading,\n    availableUpdate,\n    downloadedUpdate,\n    error: context.checkError || context.downloadError,\n  };\n};\n"]}